import 'package:fluttertoast/fluttertoast.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fyn_zon/withdraw.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:page_transition/page_transition.dart';
import 'package:fyn_zon/tokenPass.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'custom_appbar.dart';
import 'mainApi.dart';
import 'login.dart';

class Autogenerated {
  String message;
  String error;
  Data data;

  Autogenerated({this.message, this.error, this.data});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    message = json['message'];
    error = json['error'];
    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['message'] = this.message;
    data['error'] = this.error;
    if (this.data != null) {
      data['data'] = this.data.toJson();
    }
    return data;
  }
}

class Data {
  Record record;

  Data({this.record});

  Data.fromJson(Map<String, dynamic> json) {
    record =
    json['record'] != null ? new Record.fromJson(json['record']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.record != null) {
      data['record'] = this.record.toJson();
    }
    return data;
  }
}

class Record {
  String sId;
  String country;
  int phone;
  String fname;
  String lname;
  String email;
  String accType;
  String bankAccNo;
  String ifscCode;
  String address;
  String city;
  String dob;
  String pinCode;
  String state;
  String nationality;
  String bankName;
  String imageURL;
  String area;
  String houseNo;
  String landmark;
  String streetName;

  Record(
      {this.sId,
        this.country,
        this.phone,
        this.fname,
        this.lname,
        this.email,
        this.accType,
        this.bankAccNo,
        this.ifscCode,
        this.address,
        this.city,
        this.dob,
        this.pinCode,
        this.state,
        this.nationality,
        this.bankName,
        this.imageURL,
        this.area,
        this.houseNo,
        this.landmark,
        this.streetName});

  Record.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    country = json['country'];
    phone = json['phone'];
    fname = json['fname'];
    lname = json['lname'];
    email = json['email'];
    accType = json['accType'];
    bankAccNo = json['bankAccNo'];
    ifscCode = json['ifscCode'];
    address = json['address'];
    city = json['city'];
    dob = json['dob'];
    pinCode = json['pinCode'];
    state = json['state'];
    nationality = json['nationality'];
    bankName = json['bank_name'];
    imageURL = json['image_URL'];
    area = json['area'];
    houseNo = json['house_no'];
    landmark = json['landmark'];
    streetName = json['street_name'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['country'] = this.country;
    data['phone'] = this.phone;
    data['fname'] = this.fname;
    data['lname'] = this.lname;
    data['email'] = this.email;
    data['accType'] = this.accType;
    data['bankAccNo'] = this.bankAccNo;
    data['ifscCode'] = this.ifscCode;
    data['address'] = this.address;
    data['city'] = this.city;
    data['dob'] = this.dob;
    data['pinCode'] = this.pinCode;
    data['state'] = this.state;
    data['nationality'] = this.nationality;
    data['bank_name'] = this.bankName;
    data['image_URL'] = this.imageURL;
    data['area'] = this.area;
    data['house_no'] = this.houseNo;
    data['landmark'] = this.landmark;
    data['street_name'] = this.streetName;
    return data;
  }
}
class FirstWithdrawPage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return FirstWithdrawPageState();
  }
}

class FirstWithdrawPageState extends State<FirstWithdrawPage> {
  Autogenerated futureAlbum;
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  final _formKey = GlobalKey<FormState>();
  TextEditingController inrController = new TextEditingController();
  TextEditingController remarksController = new TextEditingController();
  var inr = "";
  var remarks = "";
  @override
  void initState() {
    super.initState();
    fetchAlbum();
  }

  var userid;
  fetchAlbum() async {
    /* var data = {

    };*/
    var prefs = await SharedPreferences.getInstance();
    setState(() {
      userid = prefs.getString('userid');
    });
    //AuthToken.authtoken = token;*/
    var apiData = {
      "url": AuthToken.api +
          "/" +
          "kyc/v2/userProfile/" +
          prefs.getString('token'),
      //"data": data
    };
    ApiClass.getApiCall(apiData, (onSuccess) {
      print(onSuccess.toString());
      futureAlbum = Autogenerated.fromJson(jsonDecode(onSuccess['response']));
      //print("acctype>>>>>>> " + futureAlbum.data.bankAccNo.toString());
      setState(() {});
    }, (onError) {
      print("Error working with the api");
    });
  }

  bool _isLoading = false;
  Future instantWithdraw(String inr, String remarks) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String url = AuthToken.api +
        "/" +
        "userTransaction/processpayout/" +
        prefs.getString('token');
    final response = await http.post(url,
        headers: {"Accept": "Application/json"},
        body: {"amount": inr, "remark": remarks});

    var convertedDatatoJson = jsonDecode(response.body);
    return convertedDatatoJson;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: (){
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => WithdrawPage(),
          ),
        );
      },
      child: Scaffold(
        appBar: appBar('Instant Withdraw'),
        body: userid == null
            ? GestureDetector(
                onTap: () {
                  Navigator.pop(context);
                  Navigator.push(
                    context,
                    PageTransition(
                      type: PageTransitionType.leftToRight,
                      child: LoginScreen(),
                    ),
                  );
                },
                child: Container(
                  decoration: new BoxDecoration(
                    image: new DecorationImage(image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
                  ),
                  width: MediaQuery.of(context).size.width,
                  height: MediaQuery.of(context).size.height,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Container(
                        width: 100,
                        alignment: Alignment.center,
                        padding: EdgeInsets.all(10),
                        child: Text(
                          'Login ',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                          ),
                        ),
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.all(Radius.circular(10)),
                            color: Colors.blue,
                            border: Border.all(color: Colors.blue)),
                      ),
                    ],
                  ),
                ),
              )
            : SingleChildScrollView(child: FutureBuilder<Autogenerated>(
                //future: futureAlbum,
                builder: (context, snapshot) {
                  if (futureAlbum != null) {
                    return Container(
                      width: MediaQuery.of(context).size.width,
                      height: MediaQuery.of(context).size.height,
                      // width: double.infinity,
                      child: Form(
                        key: _formKey,
                        child: Column(
                          /* mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,*/
                          children: <Widget>[

                            Column(
                              children: [
                                Container(
                                  decoration: new BoxDecoration(
                                    borderRadius: BorderRadius.only(bottomLeft: Radius.circular(40), bottomRight: Radius.circular(40)),
                                    image: new DecorationImage(image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
                                  ),
                                  height: MediaQuery.of(context).size.height /2.8,
                                  width: MediaQuery.of(context).size.width,
                                  child: Column(
                                    children: [
                                      Container(
                                        padding: EdgeInsets.only(left: 10,top: 10),
                                        alignment: Alignment.topLeft,
                                        child: Text(
                                          "Instant Withdrawal (Recommended)".toUpperCase(),
                                          textAlign: TextAlign.left,
                                          style: TextStyle(
                                              fontSize: 15,
                                              color: Colors.white,
                                              fontWeight: FontWeight.bold),
                                        ),
                                      ),


                                      SizedBox(
                                        height: 20,
                                      ),
                                      Padding(
                                        padding: EdgeInsets.all(10),
                                        child: Container(
                                          decoration: new BoxDecoration(
                                              borderRadius: BorderRadius.all(Radius.circular(15)),
                                              color: Colors.black
                                          ),
                                          padding: EdgeInsets.symmetric(horizontal: 10,vertical: 25),
                                          child: Column(
                                            children: <Widget>[
                                              Align(
                                                alignment: Alignment.topLeft,
                                                child: Padding(
                                                  padding: EdgeInsets.only(left: 8.0),
                                                  child: Text(
                                                    "Withdraw to this bank account".toUpperCase(),
                                                    style: TextStyle(
                                                        fontSize: 15,
                                                        color: Colors.blue,
                                                        fontWeight: FontWeight.bold),
                                                  ),
                                                ),
                                              ),
                                              SizedBox(
                                                height: 15,
                                              ),
                                              accountRow(),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                SizedBox(
                                  height: 10,
                                ),
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding:
                                        EdgeInsets.only(left: 16.0, right: 16),
                                    child: Text(
                                      "Max 2 lakhs per transaction | Total 50 lakhs per day Fee Rs 10 Per transaction ".toUpperCase(),
                                      textAlign: TextAlign.center,
                                      style: TextStyle(
                                        fontSize: 11,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.red,
                                      ),
                                    ),
                                  ),
                                ),
                               SizedBox(
                                 height: 20,
                               ),
                                Padding(
                                  padding: EdgeInsets.only(left: 16),
                                  child: Align(
                                    alignment: Alignment.topLeft,
                                    child: Text(
                                      "INR AMOUNT",
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[700],
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.only(
                                      left: 16, right: 16, top: 8),
                                  child: TextFormField(
                                    controller: inrController,
                                    validator: (text) {
                                      if (text.isEmpty) {
                                        return "Please enter INR amount";
                                      }
                                      final n = int.tryParse(text);
                                      if (n < 1000) {
                                        return "Please Enter Amount Minimum 1000";
                                      }

                                      inr = inrController.text;
                                      return null;
                                    },
                                    onSaved: (text) => inr = text,
                                    autocorrect: true,
                                    autofocus: false,
                                    keyboardType: TextInputType.number,
                                    //cursorHeight: 18,
                                    style: TextStyle(
                                        decoration: TextDecoration.none,
                                        //height: 0.5,
                                        color: Colors.black),
                                    decoration: new InputDecoration(
                                      border: new OutlineInputBorder(
                                        borderRadius: const BorderRadius.all(
                                          const Radius.circular(5.0),
                                        ),
                                      ),
                                      filled: true,
                                      prefixText: ' ',
                                      hintStyle:
                                          new TextStyle(color: Colors.grey[400]),
                                      hintText: "0.00",
                                      fillColor: Colors.white10,
                                    ),
                                  ),
                                ),
                                Align(
                                  alignment: Alignment.topLeft,
                                  child: Padding(
                                    padding: EdgeInsets.only(left: 16.0, top: 16),
                                    child: Text(
                                      "REMARKS",
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[700],
                                      ),
                                    ),
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.only(
                                      left: 16, right: 16, top: 8),
                                  child: TextFormField(
                                    controller: remarksController,
                                    validator: (text) {
                                      if (text.isEmpty) {
                                        return "Please enter remarks";
                                      }
                                      remarks = remarksController.text;
                                      return null;
                                    },
                                    onSaved: (text) => remarks = text,
                                    autocorrect: true,
                                    autofocus: false,
                                    keyboardType: TextInputType.text,
                                    //cursorHeight: 18,
                                    style: TextStyle(
                                        decoration: TextDecoration.none,
                                        //height: 0.5,
                                        color: Colors.black),
                                    decoration: new InputDecoration(
                                      border: new OutlineInputBorder(
                                        borderRadius: const BorderRadius.all(
                                          const Radius.circular(5.0),
                                        ),
                                      ),
                                      filled: true,
                                      prefixText: ' ',
                                      hintStyle:
                                          new TextStyle(color: Colors.grey[400]),
                                      hintText: "example test",
                                      fillColor: Colors.white10,
                                    ),
                                  ),
                                ),
                                Container(
                                  margin: EdgeInsets.only(top: 20),
                                  child: _isLoading
                                      ? CircularProgressIndicator()
                                      : SizedBox(
                                          width: double.infinity,
                                          child: Container(
                                            padding: const EdgeInsets.all(16.0),
                                            child: RaisedButton(
                                              child: Text(
                                                "WITHDRAW",
                                                style: TextStyle(
                                                    color: Colors.white,
                                                    fontSize: 15),
                                              ),
                                              color:Color(0xFF144A7D),
                                              shape: RoundedRectangleBorder(
                                                  borderRadius: BorderRadius.circular(30)),
                                              onPressed: () async {
                                                if (_formKey.currentState
                                                    .validate()) {
                                                  _formKey.currentState.save();

                                                /*  futureAlbum.data.record.kycApproved ==
                                                          true
                                                      ?*/ method();
                                                      /*: Fluttertoast.showToast(
                                                          msg:
                                                              "Kyc Not Approved !  Please Complete The Kyc",
                                                          fontSize: 16,
                                                          textColor: Colors.red,
                                                          backgroundColor:
                                                              Colors.black,
                                                          toastLength:
                                                              Toast.LENGTH_SHORT,
                                                          gravity:
                                                              ToastGravity.CENTER,
                                                          timeInSecForIosWeb: 2);*/
                                                }
                                              },
                                            ),
                                          ),
                                        ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                    //Text(snapshot.data.title);
                  } else if (snapshot.hasError) {
                    return Text("${snapshot.error}");
                  }
                  return Container(
                      alignment: Alignment.center,
                      decoration: new BoxDecoration(
                        image: new DecorationImage(image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
                      ),
                      width: MediaQuery.of(context).size.width,
                      height: MediaQuery.of(context).size.height,
                      child: CircularProgressIndicator(
                          strokeWidth: 6.0,
                          backgroundColor: Colors.green,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.blue)
                      ));
                },
              )),
      ),
    );
  }

  Future method() async {
    setState(() => _isLoading = true);
    var rsp = await instantWithdraw(inr, remarks);
    var data = rsp['data'];
    var message = rsp['message'];
    var error = rsp['error'];
    if (error == true) {
      print(message);
      setState(() => _isLoading = false);
      Fluttertoast.showToast(
          msg: message,
          fontSize: 16,
          textColor: Colors.red,
          backgroundColor: Colors.black,
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.CENTER,
          timeInSecForIosWeb: 2);
    } else {
      print(message);
      setState(() => _isLoading = false);
      Fluttertoast.showToast(
          msg: message,
          fontSize: 16,
          textColor: Colors.red,
          backgroundColor: Colors.black,
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.CENTER,
          timeInSecForIosWeb: 2);
    }
  }


  Widget accountRow(){
    return Container(
      alignment: Alignment.topLeft,
      padding: EdgeInsets.fromLTRB(20, 10, 20, 20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          account(),
          account2()
        ],
      ),
    );
  }

  Widget account(){
    return Container(
      alignment: Alignment.topLeft,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Container(
            alignment: Alignment.topLeft,
            child: Text('Account Number',
              style: TextStyle(
                  fontSize: 15,
                  color: Colors.white,
                  letterSpacing: 0.5,
                  fontWeight: FontWeight.w600
              ),),
          ),
          Container(
            padding: EdgeInsets.only(top: 10),
            alignment: Alignment.topLeft,
            child: Text('IFSC Code',
              style: TextStyle(
                  fontSize: 15,
                  color: Colors.white,
                  letterSpacing: 0.5,
                  fontWeight: FontWeight.w600
              ),),
          ),
          Padding(
            padding: EdgeInsets.only(top: 10),
            child: Text('Account Type',
              style: TextStyle(
                  fontSize: 15,
                  color: Colors.white,
                  letterSpacing: 0.5,
                  fontWeight: FontWeight.w600
              ),),
          ),
        ],
      ),
    );
  }
  Widget account2(){
    return Container(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Text(futureAlbum.data.record.bankAccNo.toString(),
            style: TextStyle(
                fontSize: 15,
                color: Colors.white,
                letterSpacing: 0.5,
                fontWeight: FontWeight.w600
            ),),
          Padding(
            padding: EdgeInsets.only(top: 10),
            child: Text(futureAlbum.data.record.ifscCode.toString(),
              style: TextStyle(
                  fontSize: 15,
                  color: Colors.white,
                  letterSpacing: 0.5,
                  fontWeight: FontWeight.w600
              ),),
          ),
          Padding(
            padding: EdgeInsets.only(top: 10),
            child: Text(futureAlbum.data.record.accType.toString(),
              style: TextStyle(
                  fontSize: 15,
                  color: Colors.white,
                  letterSpacing: 0.5,
                  fontWeight: FontWeight.w600
              ),),
          ),
        ],
      ),
    );
  }

}
