import 'dart:convert';
import 'dart:typed_data';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';
import 'package:fyn_zon/tokenPass.dart';

import 'Model/qrCodeModel.dart';
import 'mainApi.dart';
class CurrencyWithdraw extends StatefulWidget {
  String currncy;
  CurrencyWithdraw({
    Key key,
    @required this.currncy,
  }) : super(key: key);
  @override
  _CurrencyWithdrawState createState() => _CurrencyWithdrawState();
}

class _CurrencyWithdrawState extends State<CurrencyWithdraw> {
  final _formKey = GlobalKey<FormState>();
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  TextEditingController amountController = new TextEditingController();
  TextEditingController addressController = new TextEditingController();
  String amount = "";
  String address = "";

  bool _isLoading = false;
  String min = "0.05";
  Autogenerated futureAlbum;
  var file;
  Uint8List _bytes;
  String currncy_type;
  //String address;
  var curbtc = "BTC";
  var curbch = "BCH";
  var cureth = "ETH";
  var curusdt = "USDT";
  var curcrmt = "CRMT";


  @override
  void initState() {
    super.initState();
    check();
    //addressController.text = futureAlbum.data.address.toString();

  }
  var image;
  check(){
    print(widget.currncy.toString());
    if(widget.currncy == curbtc){
      currncy_type = 'getQRcodeBTC';
      fetchAlbum();
    }else if(widget.currncy == curbch){
      currncy_type = 'getQRcodeBCH';
      fetchAlbum();
    }else if(widget.currncy == cureth){
      currncy_type = 'getQRcodeETH';
      fetchAlbum();
    }else if(widget.currncy == curusdt){
      currncy_type = 'getQRcodeUSDT';
      fetchAlbum();
      /*address = futureAlbum.data.address;
      print(address);*/
    }else{
      currncy_type = 'getQRcodeCRMT';
      fetchAlbum();
    }
  }
  fetchAlbum() async {
    setState(() => _isLoading = true);
    /* var data = {
    };*/
    SharedPreferences prefs = await SharedPreferences.getInstance();

    var apiData = {
      "url":
      AuthToken.api+"/"+currncy_type+"/"+prefs.getString('token')+"/"+prefs.getString('userid'),
      //"data": data
    };
    ApiClass.getApiCall(apiData, (onSuccess) {
      print(onSuccess.toString());
      futureAlbum = Autogenerated.fromJson(jsonDecode(onSuccess['response']));
      // print("walletqrcode>>>>>>> " + futureAlbum.data.qrcode);
      _bytes = base64.decode(futureAlbum.data.qrcode.split(',').last);
      print(futureAlbum.data.address.toString());
      setState(() {

      });
      setState(() => _isLoading = false);
    }, (onError) {
      print("Error working with the api");
      setState(() => _isLoading = false);
    }
    );
  }

  Future withdrawWallet(String address, String currency, String amount) async
  {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String url = AuthToken.api+"/"+"wallet/createWithdrawRequest"+"/"+prefs.getString('token');
    final response= await http.post(url,
        headers: {"Accept": "Application/json"},
        body: {
          "requestedCurrency": currency,
          "requestedAmount": amount,
          "depositAddress": address

        }
    );

    var convertedDatatoJson =jsonDecode(response.body);
    return convertedDatatoJson;

  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      body: Container(
          color: Color(0xFF18222C),
        padding: EdgeInsets.all(20),
        child: futureAlbum != null ?
        Form(
          key: _formKey,
          child: Column(
            children: <Widget>[
              Container(
                padding: EdgeInsets.all(10),
                alignment: Alignment.topLeft,
                child: Text('Destination Address',style: TextStyle(color: Colors.white,fontSize: 18),),
              ),
              Container(
                child: TextFormField(
                  autocorrect: true,
                  autofocus: false,
                  controller: addressController,
                  keyboardType: TextInputType.text,
                  cursorColor: Colors.white,
                  style: TextStyle(
                      color: Colors.white
                  ),
                  validator: (text) {
                    if (text.isEmpty)
                      return "Please enter Destination address";
                    address = addressController.text;
                    return null;
                  },
                  onSaved: (text) => address = text,
                  decoration: new InputDecoration(
                    /* border: new OutlineInputBorder(
                                      borderSide: new BorderSide(color: Colors.red)
                               git   ),*/

                    enabledBorder: new OutlineInputBorder(
                      borderSide: new BorderSide(
                          color: Colors.white),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderSide: BorderSide(
                          color: Colors.white),
                    ),
                    filled: true,
                    hintStyle:
                    new TextStyle(color: Colors.grey[400]),
                    hintText: "Address",
                    // fillColor: Colors.white70
                  ),
                ),
              ),
              Container(
                padding: EdgeInsets.all(10),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: <Widget>[
                    Container(

                      alignment: Alignment.topLeft,
                      child: Text('${widget.currncy} Amount',style: TextStyle(color: Colors.white,fontSize: 18),),
                    ),
                   /* Container(
                      alignment: Alignment.topRight,
                      child: Text('0.1 ${widget.currncy}',style: TextStyle(
                        color: Colors.white
                      ),),
                    ),*/
                  ],
                ),
              ),
              Container(
                child: TextFormField(
                  autocorrect: true,
                  autofocus: false,
                  controller: amountController,
                  keyboardType: TextInputType.text,
                  cursorColor: Colors.white,
                  style: TextStyle(
                      color: Colors.white
                  ),
                  validator: (text) {
                    if(text.isEmpty) return "Please enter amount";
                    var n = num.tryParse(text);
                    if(n < 0.05)
                      return "Please Enter Amount above 0.05";

                    amount = amountController.text;
                    return null;
                  },
                  onSaved: (text) => amount = text,
                  decoration: new InputDecoration(
                    /* border: new OutlineInputBorder(
                                      borderSide: new BorderSide(color: Colors.red)
                               git   ),*/

                      enabledBorder: new OutlineInputBorder(
                        borderSide: new BorderSide(
                            color: Colors.white),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderSide: BorderSide(
                            color: Colors.white),
                      ),
                      filled: true,
                      hintStyle:
                      new TextStyle(color: Colors.grey[400]),
                      hintText: "Amount",
                    // fillColor: Colors.white70
                  ),
                ),
              ),
              Container(
                padding: EdgeInsets.only(top: 10),
                alignment: Alignment.topLeft,
                child: Text('Withdraw Fee: 0.005',style: TextStyle(
                  color: Colors.white,

                ),)
              ),
              Container(
                padding: EdgeInsets.only(top: 20),

                child: _isLoading ? CircularProgressIndicator():
                MaterialButton(
                  minWidth: double.infinity,
                  height: 40,
                  onPressed: () async{
                    if (_formKey.currentState.validate()) {
                      _formKey.currentState.save();
                      setState(() => _isLoading = true);
                      var currency = widget.currncy;
                      var rsp = await withdrawWallet(address, currency, amount);
                      var data = rsp['data'];
                      var error = rsp['error'];
                      if(error == true){
                        print('error');
                        _scaffoldKey.currentState.showSnackBar(new SnackBar(
                          content: new Text(
                            rsp['message'],
                            style: TextStyle(color: Colors.red),
                          ),
                          duration: new Duration(seconds: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(16.0), topRight: Radius.circular(16.0)),
                          ),
                        ));
                        setState(() => _isLoading = false);
                      }else{
                        _scaffoldKey.currentState.showSnackBar(new SnackBar(
                          content: new Text(
                            rsp['message'],
                            style: TextStyle(color: Colors.green),
                          ),
                          duration: new Duration(seconds: 2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(16.0), topRight: Radius.circular(16.0)),
                          ),
                        ));
                        amountController.clear();
                        setState(() => _isLoading = false);
                      }

                    }
                  },
                  color: Colors.blueGrey,
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(5)),
                  child: Text(
                    "PROCEED",
                    style: TextStyle(
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                        color: Colors.white),
                  ),
                ),
              )
            ],
          ),
        ): Center(child: CircularProgressIndicator())
      ),
    );
  }
}