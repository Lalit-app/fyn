import 'package:flutter/material.dart';
import 'package:fyn_zon/Asset/assets.dart';
import 'package:fyn_zon/animation/FadeAnimation.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:fyn_zon/orderHistory.dart';
import 'package:fyn_zon/paymentOption.dart';
import 'package:fyn_zon/Settings/update_bank.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:page_transition/page_transition.dart';
import 'package:fyn_zon/tokenPass.dart';
import 'package:fyn_zon/signup.dart';
import 'package:fyn_zon/mainscreen.dart';
import 'package:fyn_zon/Settings/updateProfile.dart';
import 'mainApi.dart';
import 'Settings/kyc.dart';
import 'login.dart';
class Autogenerated {
  String message;
  String error;
  Data data;

  Autogenerated({this.message, this.error, this.data});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    message = json['message'];
    error = json['error'];
    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['message'] = this.message;
    data['error'] = this.error;
    if (this.data != null) {
      data['data'] = this.data.toJson();
    }
    return data;
  }
}

class Data {
  String country;
  String panImage;
  String adhaarImage;
  String adhaarBackImage;
  bool updateMainNetBalance;
  bool kycApproved;
  String sId;
  int phone;
  String fname;
  String mname;
  String lname;
  String email;
  String pin;
  String accType;
  String bankAccNo;
  String ifscCode;
  String address;
  String adhaarNumber;
  String city;
  String dob;
  String panNumber;
  String pinCode;
  String state;
  String nationality;

  Data(
      {this.country,
        this.panImage,
        this.adhaarImage,
        this.adhaarBackImage,
        this.updateMainNetBalance,
        this.kycApproved,
        this.sId,
        this.phone,
        this.fname,
        this.mname,
        this.lname,
        this.email,
        this.pin,
        this.accType,
        this.bankAccNo,
        this.ifscCode,
        this.address,
        this.adhaarNumber,
        this.city,
        this.dob,
        this.panNumber,
        this.pinCode,
        this.state,
        this.nationality});

  Data.fromJson(Map<String, dynamic> json) {
    country = json['country'];
    panImage = json['panImage'];
    adhaarImage = json['adhaarImage'];
    adhaarBackImage = json['adhaarBackImage'];
    updateMainNetBalance = json['updateMainNetBalance'];
    kycApproved = json['kycApproved'];
    sId = json['_id'];
    phone = json['phone'];
    fname = json['fname'];
    mname = json['mname'];
    lname = json['lname'];
    email = json['email'];
    pin = json['pin'];
    accType = json['accType'];
    bankAccNo = json['bankAccNo'];
    ifscCode = json['ifscCode'];
    address = json['address'];
    adhaarNumber = json['adhaarNumber'];
    city = json['city'];
    dob = json['dob'];
    panNumber = json['panNumber'];
    pinCode = json['pinCode'];
    state = json['state'];
    nationality = json['nationality'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['country'] = this.country;
    data['panImage'] = this.panImage;
    data['adhaarImage'] = this.adhaarImage;
    data['adhaarBackImage'] = this.adhaarBackImage;
    data['updateMainNetBalance'] = this.updateMainNetBalance;
    data['kycApproved'] = this.kycApproved;
    data['_id'] = this.sId;
    data['phone'] = this.phone;
    data['fname'] = this.fname;
    data['mname'] = this.mname;
    data['lname'] = this.lname;
    data['email'] = this.email;
    data['pin'] = this.pin;
    data['accType'] = this.accType;
    data['bankAccNo'] = this.bankAccNo;
    data['ifscCode'] = this.ifscCode;
    data['address'] = this.address;
    data['adhaarNumber'] = this.adhaarNumber;
    data['city'] = this.city;
    data['dob'] = this.dob;
    data['panNumber'] = this.panNumber;
    data['pinCode'] = this.pinCode;
    data['state'] = this.state;
    data['nationality'] = this.nationality;
    return data;
  }
}
class Dbar extends StatefulWidget {
  @override
  _DbarState createState() => _DbarState();
}

class _DbarState extends State<Dbar> {

  Future<void> main() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
   // prefs?.clear();
    prefs.remove('token');
    prefs.remove('userid');
    Navigator.pop(context);
    Navigator.pushReplacement(
      context,
      PageTransition(
        type: PageTransitionType.leftToRight,
        child: MainScreenPage(),
      ),
    );
        (Route route) => false;
  }
  Future<void> logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    // prefs?.clear();
    prefs.remove('token');
    prefs.remove('userid');
    Fluttertoast.showToast(
        msg: "User Logout",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        timeInSecForIosWeb: 1
    );
   setState(() {
     Navigator.pop(context);
     Navigator.pushReplacement(
       context,
       PageTransition(
         type: PageTransitionType.leftToRight,
         child: MainScreenPage(),
       ),
     );
   });
        (Route route) => false;
  }
  Autogenerated futureAlbum;
  @override
  void initState() {
    super.initState();
    fetchAlbum1();
    setState(() {

    });
  }
  var userid;
  Future<void> fetchAlbum1() async {
    /* var data = {

    };*/
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      userid = prefs.getString('userid');
    });
      var apiData = {
      "url": AuthToken.api + "/" + "client/userDetails/"+ prefs.getString('token'),
      //"data": data
    };
    ApiClass.getApiCall(apiData, (onSuccess) {
      print(onSuccess.toString());
      futureAlbum = Autogenerated.fromJson(jsonDecode(onSuccess['response']));
      //print("walletqrcode>>>>>>> " + futureAlbum.data.phone.toString());
      print("walletqrcode>>>>>>> " + futureAlbum.message.toString());
      print(prefs.getString('token'));
      setState(() {});
    }, (onError) {
      //Invalid token in the request 401
      print('lalit $onError');
      print("Error working with the api");
      logout();

    }

    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF18222C),
      body: Container(
          color: Color(0xFF18222C),
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          child: userid == null ?
          Container(
            width: MediaQuery.of(context).size.width/1.5,
            height: MediaQuery.of(context).size.height,
            color: Color(0xFF18222C),
            child:  Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: <Widget>[
                GestureDetector(
                  onTap:(){
                    Navigator.pop(context);
                    Navigator.push(
                      context,
                      PageTransition(
                        type: PageTransitionType.leftToRight,
                        child: LoginScreen(),
                      ),
                    );
                  },
                  child: Container(
                    color: Color(0xFF233446),
                    margin: EdgeInsets.only(top: 20),
                    padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                    child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: <Widget>[
                          Text('Login',
                            style: TextStyle(color: Colors.white, fontSize: 15),
                          ),
                        ]

                    ),
                  ),
                ),
                GestureDetector(
                  onTap:(){
                    Navigator.pop(context);
                    Navigator.push(
                      context,
                      PageTransition(
                        type: PageTransitionType.leftToRight,
                        child: SignupPage(),
                      ),
                    );
                  },
                  child: Container(
                    color: Color(0xFF233446),
                    margin: EdgeInsets.only(top: 1),
                    padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                    child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: <Widget>[
                          Text('Signup',
                            style: TextStyle(color: Colors.white, fontSize: 15),
                          ),
                        ]

                    ),
                  ),
                ),

              ],
            ),
          ) :
          /*futureAlbum.message == "Invalid token in the request"
          ? main()
              :*/
          FutureBuilder<Autogenerated>(
              builder: (context, snapshot){
                if (futureAlbum != null) {
                  String name = futureAlbum.data.fname;
                  String lastname = futureAlbum.data.lname;
                  String email = futureAlbum.data.email;
                  String city = futureAlbum.data.city;
                  String state = futureAlbum.data.state;
                  String nationality = futureAlbum.data.nationality;
                  String pin = futureAlbum.data.pin;
                  String pincode = futureAlbum.data.pinCode;
                  String phone = futureAlbum.data.phone.toString();
                  String accNumber = futureAlbum.data.bankAccNo.toString();
                  String ifsc = futureAlbum.data.ifscCode.toString();
                  return Container(
                    color: Color(0xFF18222C),
                    child: ListView(
                      children: <Widget>[
                        Container(
                          color: Color(0xFF233446),
                          margin: EdgeInsets.only(top: 25),
                          padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                          child: Row(
                              mainAxisAlignment: MainAxisAlignment
                                  .spaceBetween,
                              children: <Widget>[
                                Container(
                                  child: Row(
                                    children: <Widget>[
                                      Text(futureAlbum.data.fname,
                                        style: TextStyle(color: Colors.white,
                                            fontSize: 15),
                                      ),
                                      Container(
                                        margin: EdgeInsets.only(left: 5),
                                        child: Text(futureAlbum.data.lname,
                                          style: TextStyle(
                                              color: Colors.white,
                                              fontSize: 15),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ]

                          ),
                        ),
                        Container(
                          color: Color(0xFF233446),
                          margin: EdgeInsets.only(top: 0.5),
                          padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                          child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: <Widget>[
                                Text(futureAlbum.data.email,
                                  style: TextStyle(
                                      color: Colors.white, fontSize: 15),
                                ),
                              ]

                          ),
                        ),

                        GestureDetector(
                          onTap: () {
                            Navigator.pop(context);
                            Navigator.push(
                              context,
                              PageTransition(
                                type: PageTransitionType.leftToRight,
                                child: Assets(),
                              ),
                            );
                          },
                          child: FadeAnimation(
                            1.5, Container(
                            margin: EdgeInsets.only(top: 10),
                            color: Color(0xFF233446),
                            padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment
                                    .spaceBetween,
                                children: <Widget>[
                                  Text(
                                    'Assets',
                                    style: TextStyle(
                                        color: Colors.white, fontSize: 15),
                                  ),
                                  Icon(
                                    Icons.chevron_right, color: Colors.white,),
                                ]

                            ),
                          ),
                          ),
                        ),
                        GestureDetector(
                          onTap: () {
                            Navigator.pop(context);
                            Navigator.push(
                              context,
                              PageTransition(
                                type: PageTransitionType.leftToRight,
                                child: OrderHistory(),
                              ),
                            );
                          },
                          child: FadeAnimation(
                            1.5, Container(
                            margin: EdgeInsets.only(top: 10),
                            color: Color(0xFF233446),
                            padding: EdgeInsets.fromLTRB(15, 10, 20, 10),
                            child: Row(
                                mainAxisAlignment: MainAxisAlignment
                                    .spaceBetween,
                                children: <Widget>[
                                  Text(
                                    'Reports',
                                    style: TextStyle(
                                        color: Colors.white, fontSize: 15),
                                  ),
                                  Icon(
                                    Icons.chevron_right, color: Colors.white,),
                                ]

                            ),
                          ),
                          ),
                        ),
                      ],
                    ),
                  );
                }
                else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                return Container(
                    alignment: Alignment.center,
                    height: MediaQuery.of(context).size.height,
                    width: MediaQuery.of(context).size.width,
                    // margin: EdgeInsets.only(top: 80),
                    child: CircularProgressIndicator(
                        strokeWidth: 6.0,
                        backgroundColor: Colors.green,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.blue)));
              }
          )
      )
    );

  }
}
