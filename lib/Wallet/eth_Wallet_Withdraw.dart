import 'dart:convert';
import 'dart:typed_data';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';
import 'package:fyn_zon/tokenPass.dart';

import 'Model/qrCodeModel.dart';
import 'mainApi.dart';

class EthWalletWithdraw extends StatefulWidget {
  String currncy;
  EthWalletWithdraw({
    Key key,
    @required this.currncy,
  }) : super(key: key);
  @override
  _EthWalletWithdrawState createState() => _EthWalletWithdrawState();
}

class _EthWalletWithdrawState extends State<EthWalletWithdraw> {
  final _formKey = GlobalKey<FormState>();
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
  TextEditingController amountController = new TextEditingController();
  TextEditingController addressController = new TextEditingController();
  String amount = "";
  String address = "";

  bool _isLoading = false;
  String min = "0.05";
  Autogenerated futureAlbum;
  @override
  void initState() {
    super.initState();
    fetchAlbum();
    //addressController.text = futureAlbum.data.address.toString();

  }

  fetchAlbum() async {
    setState(() => _isLoading = true);
    /* var data = {
    };*/
    SharedPreferences prefs = await SharedPreferences.getInstance();

    var apiData = {
      "url":
      AuthToken.api+"/"+"getQRcodeETH"+"/"+prefs.getString('token')+"/"+prefs.getString('userid'),
      //"data": data
    };
    ApiClass.getApiCall(apiData, (onSuccess) {
      print(onSuccess.toString());
      futureAlbum = Autogenerated.fromJson(jsonDecode(onSuccess['response']));
      // print("walletqrcode>>>>>>> " + futureAlbum.data.qrcode);
     // _bytes = base64.decode(futureAlbum.data.qrcode.split(',').last);
      print(futureAlbum.data.address.toString());
      setState(() {

      });
      setState(() => _isLoading = false);
    }, (onError) {
      print("Error working with the api");
      setState(() => _isLoading = false);
    }
    );
  }

  Future withdrawWallet(String address, String currency, String amount) async
  {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String url = AuthToken.api+"/"+"wallet/createWithdrawRequest"+"/"+prefs.getString('token');
    final response= await http.post(url,
        headers: {"Accept": "Application/json"},
        body: {
          "requestedCurrency": currency,
          "requestedAmount": amount,
          "depositAddress": address

        }
    );

    var convertedDatatoJson =jsonDecode(response.body);
    return convertedDatatoJson;

  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          decoration: new BoxDecoration(
            image: new DecorationImage(image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
          ),
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          child: FutureBuilder<Autogenerated>(
              builder: (context, snapshot){
                if (futureAlbum !=null){
                  addressController.text = futureAlbum.data.address.toString();
                  return Form(
                    key: _formKey,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        MaterialButton(
                          height: 40,
                          minWidth: 140,
                          onPressed: () {
                          },
                          //color:Color(0xFF81C1DF),
                          color:Color(0xFF144A7D),
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5)),
                          child: Text(
                            "Withdraw",
                            style: TextStyle(
                              //fontFamily: 'berlinsans',
                                letterSpacing: 1,
                                fontWeight: FontWeight.bold,
                                fontSize: 18,
                                color: Colors.white),
                          ),
                        ),
                        SizedBox(
                          height: 20,
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 20),
                          child: Card(
                            child: Padding(
                              padding: EdgeInsets.symmetric(horizontal: 20,vertical: 20),
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.topLeft,
                                    child: Text(
                                      'Ethereum',
                                      textAlign: TextAlign.left,
                                      style: TextStyle(
                                        fontFamily: 'berlinsans',
                                        letterSpacing: 0.8,
                                        fontSize: 22,
                                        fontWeight: FontWeight.w600,
                                        color: Colors.black87,
                                      ),
                                    ),
                                  ),
                                  SizedBox(
                                    height: 10,
                                  ),
                                  Align(
                                    alignment: Alignment.topLeft,
                                    child: Text(
                                      "\$${widget.currncy}",
                                      textAlign: TextAlign.left,
                                      style: TextStyle(
                                        fontFamily: 'berlinsans',
                                        letterSpacing: 1,
                                        fontSize:40,
                                        fontWeight: FontWeight.w500,
                                        color: Colors.black87,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 25, vertical: 20),
                          alignment: Alignment.topLeft,
                          child: Text('Destination Address',
                            style: TextStyle(
                                fontFamily: 'berlinsans',
                                color: Colors.lightBlueAccent,fontSize: 18
                            ),),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 25,),
                          child: TextFormField(
                            autocorrect: true,
                            autofocus: false,
                            controller: addressController,
                            keyboardType: TextInputType.multiline,
                            cursorColor: Colors.white,
                            style: TextStyle(
                                color: Colors.black
                            ),
                            validator: (text) {
                              if (text.isEmpty)
                                return "Please enter Destination address";
                              address = addressController.text;
                              return null;
                            },
                            onSaved: (text) => address = text,
                            decoration: new InputDecoration(
                              fillColor: Colors.white,
                              isDense: true,
                              contentPadding: new EdgeInsets.symmetric(vertical: 15.0, horizontal: 10.0),


                              enabledBorder: new OutlineInputBorder(
                                borderSide: new BorderSide(
                                    color: Colors.white),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    color: Colors.white),
                              ),
                              filled: true,
                              hintStyle:
                              new TextStyle(
                                  fontFamily: 'berlinsans',
                                  fontSize: 18,
                                  color: Colors.black),
                              hintText: "Address",

                            ),
                          ),
                        ),
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 25, vertical: 20),
                          alignment: Alignment.topLeft,
                          child: Text('ETH Amount',
                            style: TextStyle(
                                fontFamily: 'berlinsans',
                                color: Colors.lightBlueAccent,fontSize: 18
                            ),),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 25,),
                          child: TextFormField(
                            autocorrect: true,
                            autofocus: false,
                            controller: amountController,
                            keyboardType: TextInputType.text,
                            cursorColor: Colors.white,
                            style: TextStyle(
                                color: Colors.black
                            ),
                            validator: (text) {
                              if(text.isEmpty) return "Please enter amount";
                              var n = num.tryParse(text);
                              if(n < 0.05)
                                return "Please Enter Amount above 0.05";

                              amount = amountController.text;
                              return null;
                            },
                            onSaved: (text) => amount = text,
                            decoration: new InputDecoration(
                              fillColor: Colors.white,
                              isDense: true,
                              contentPadding: new EdgeInsets.symmetric(vertical: 15.0, horizontal: 10.0),


                              enabledBorder: new OutlineInputBorder(
                                borderSide: new BorderSide(
                                    color: Colors.white),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                    color: Colors.white),
                              ),
                              filled: true,
                              hintStyle:
                              new TextStyle(
                                  fontFamily: 'berlinsans',
                                  fontSize: 18,
                                  color: Colors.black),
                              hintText: "Amount",
                            ),
                          ),
                        ),
                        SizedBox(
                          height: 20,
                        ),
                        Container(
                            alignment: Alignment.topLeft,
                            padding: EdgeInsets.symmetric(horizontal: 25),
                            child: Text('Withdraw Fee: 0.005',
                              textAlign: TextAlign.left,
                              style: TextStyle(
                                fontFamily: 'berlinsans',
                                color: Colors.white,

                              ),)
                        ),
                        Container(
                          padding: EdgeInsets.only(top: 20),

                          child: _isLoading ? CircularProgressIndicator():
                          Padding(
                            padding: EdgeInsets.symmetric(horizontal: 35),
                            child: MaterialButton(
                              minWidth: double.infinity,
                              height: 40,
                              onPressed: () async{
                                if (_formKey.currentState.validate()) {
                                  _formKey.currentState.save();
                                  setState(() => _isLoading = true);
                                  var currency = widget.currncy;
                                  var rsp = await withdrawWallet(address, currency, amount);
                                  var data = rsp['data'];
                                  var error = rsp['error'];
                                  if(error == true){
                                    print('error');
                                    Fluttertoast.showToast(
                                        msg: rsp['message'],
                                        toastLength: Toast.LENGTH_SHORT,
                                        gravity: ToastGravity.CENTER,
                                        timeInSecForIosWeb: 1,
                                        backgroundColor: Colors.green,
                                        textColor: Colors.white,
                                        fontSize: 16.0);
                                    /*_scaffoldKey.currentState.showSnackBar(new SnackBar(
                                      content: new Text(
                                        rsp['message'],
                                        style: TextStyle(color: Colors.red),
                                      ),
                                      duration: new Duration(seconds: 2),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(16.0), topRight: Radius.circular(16.0)),
                                      ),
                                    ));*/
                                    setState(() => _isLoading = false);
                                  }else{
                                    print('secuss');
                                    Fluttertoast.showToast(
                                        msg: rsp['message'],
                                        toastLength: Toast.LENGTH_SHORT,
                                        gravity: ToastGravity.CENTER,
                                        timeInSecForIosWeb: 1,
                                        backgroundColor: Colors.green,
                                        textColor: Colors.white,
                                        fontSize: 16.0);
                                    /*_scaffoldKey.currentState.showSnackBar(new SnackBar(
                                      content: new Text(
                                        rsp['message'],
                                        style: TextStyle(color: Colors.green),
                                      ),
                                      duration: new Duration(seconds: 2),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.only(
                                            topLeft: Radius.circular(16.0), topRight: Radius.circular(16.0)),
                                      ),
                                    ));*/
                                    amountController.clear();
                                    setState(() => _isLoading = false);
                                  }

                                }
                              },
                              color:Color(0xFF144A7D),
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(30)),
                              child: Text(
                                "PROCEED",
                                style: TextStyle(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 14,
                                    color: Colors.white),
                              ),
                            ),
                          ),
                        )
                      ],
                    ),
                  );
                }else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                return Container(
                    alignment: Alignment.center,
                    height: MediaQuery.of(context).size.height,
                    width: MediaQuery.of(context).size.width,
                    child: CircularProgressIndicator(strokeWidth: 6.0,
                        backgroundColor: Colors.green,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.blue)));
              }
          )
        ),
      ),
    );
  }
}





/**/
