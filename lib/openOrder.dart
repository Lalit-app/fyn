import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:fyn_zon/mainscreen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fyn_zon/tokenPass.dart';
import 'package:page_transition/page_transition.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:fyn_zon/login.dart';
import 'package:fyn_zon/animation/FadeAnimation.dart';
import 'api/api.dart';
import 'mainApi.dart';
class Autogenerated {
  String message;
  String error;
  List<Data> data;

  Autogenerated({this.message, this.error, this.data});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    message = json['message'];
    error = json['error'];
    if (json['data'] != null) {
      data = new List<Data>();
      json['data'].forEach((v) {
        data.add(new Data.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['message'] = this.message;
    data['error'] = this.error;
    if (this.data != null) {
      data['data'] = this.data.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Data {
  String sId;
  String baseCurrency;
  String tradingCurrency;
  var volume;
  var price;
  String userid;
  String purpose;
  var total;
  var unsettledVolume;
  bool flag;
  String time;

  Data(
      {this.sId,
        this.baseCurrency,
        this.tradingCurrency,
        this.volume,
        this.price,
        this.userid,
        this.purpose,
        this.total,
        this.unsettledVolume,
        this.flag,
        this.time});

  Data.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    baseCurrency = json['baseCurrency'];
    tradingCurrency = json['tradingCurrency'];
    volume = json['volume'];
    price = json['price'];
    userid = json['userid'];
    purpose = json['purpose'];
    total = json['total'];
    unsettledVolume = json['unsettledVolume'];
    flag = json['flag'];
    time = json['time'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['baseCurrency'] = this.baseCurrency;
    data['tradingCurrency'] = this.tradingCurrency;
    data['volume'] = this.volume;
    data['price'] = this.price;
    data['userid'] = this.userid;
    data['purpose'] = this.purpose;
    data['total'] = this.total;
    data['unsettledVolume'] = this.unsettledVolume;
    data['flag'] = this.flag;
    data['time'] = this.time;
    return data;
  }
}

class OpenOrder extends StatefulWidget {
  @override
  _OpenOrderState createState() => _OpenOrderState();
}

class _OpenOrderState extends State<OpenOrder> {
  Autogenerated futureAlbum;
  var total="";
  String inr = "INR";
  bool _isLoading =false;
  //var total;
  @override
  void initState() {
    super.initState();
      fetchAlbum();
  }

  Future<void> logout() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    // prefs?.clear();
    prefs.remove('token');
    prefs.remove('userid');
    fetchAlbum();
    Fluttertoast.showToast(
        msg: "User Logout",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        timeInSecForIosWeb: 1
    );

    /*setState(() {
      Navigator.pushReplacement(
        context,
        PageTransition(
          type: PageTransitionType.leftToRight,
          child: LoginScreen(),
        ),
      );
    });*/
        (Route route) => false;
  }
  var userid;
  fetchAlbum() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
     setState(() {
       userid = prefs.getString('userid');
     });
    var apiData = {
      "url": AuthToken.api + "/" + "orders/"+prefs.getString('token'),
      //"data": data
    };
    ApiClass.getApiCall(apiData, (onSuccess) {
      print(onSuccess.toString());
      futureAlbum = Autogenerated.fromJson(jsonDecode(onSuccess['response']));
      print("data>>>>>>>>>>" + futureAlbum.data.length.toString());
      setState(() {});
    }, (onError) {
      print("Error working with the api");
      setState(() {});
      logout();

    });
  }
   var num;
  var value;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF233446),
      body: FadeAnimation(
        0.0,
        userid == null ?
        GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => LoginScreen(),
              ),
            );
          },
          child: Container(
            width: MediaQuery
                .of(context)
                .size
                .width,
            height: MediaQuery
                .of(context)
                .size
                .height,
            decoration: new BoxDecoration(
              image: new DecorationImage(
                image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Container(
                  width: 100,
                  alignment: Alignment.center,
                  padding: EdgeInsets.all(10),
                  child: Text(
                    'Login ',
                    style: TextStyle(color: Colors.white, fontSize: 18,),
                  ),
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.all(Radius.circular(10)),
                      color: Colors.blue,
                      border: Border.all(color: Colors.blue)),
                ),

              ],
            ),
          ),
        ) :
        Container(
            child: FutureBuilder<Autogenerated>(
              builder: (context, snapshot) {
                if (futureAlbum != null) {
                  return FadeAnimation(
                    0.0
                    , Column(
                    children: [
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 15),
                        height: 50,
                        color: Colors.black,
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: <Widget>[
                            Text(
                              "PAIR",
                              style: TextStyle(color: Colors.white,fontWeight: FontWeight.w600,letterSpacing: 0.5),
                            ),

                            Text(
                              "AMOUNT",
                              style: TextStyle(color: Colors.white,fontWeight: FontWeight.w600,letterSpacing: 0.5),
                            ),
                            Text(
                              "VOLUME",
                              style: TextStyle(color: Colors.white,fontWeight: FontWeight.w600,letterSpacing: 0.5),
                            ),
                            Text(
                              "TOTAL",
                              style: TextStyle(color: Colors.white,fontWeight: FontWeight.w600,letterSpacing: 0.5),
                            ),
                            Text(
                              "STATUS",
                              style: TextStyle(color: Colors.white,fontWeight: FontWeight.w600,letterSpacing: 0.5),
                            ),
                          ],
                        ),
                      ),
                      Flexible(
                        child: Container(
                          decoration: new BoxDecoration(
                            image: new DecorationImage(image: new AssetImage("assets/bg.png"), fit: BoxFit.cover,),
                          ),
                          child: ListView.builder(
                              itemCount: futureAlbum.data.length == null
                                  ? 0
                                  : futureAlbum.data.length,

                              itemBuilder: (context, position) {
                                var item = futureAlbum.data[position];
                                //var volume = futureAlbum.data[position].volume.toString();
                                var price = futureAlbum.data[position].price
                                    .toString();
                                var total1 = futureAlbum.data[position].total
                                    .toString();
                                var total2 = double.parse(total1);
                                /*var sum = double.parse(volume) * double.parse(price);
                              total = sum.toString();
                              print(sum.toString());*/
                                var num1 = double.parse(
                                    futureAlbum.data[position].unsettledVolume
                                        .toString());
                                String value = num1.toString();
                                int pointIndex = value.indexOf(".");
                                String afterDecimal = value.substring(
                                    pointIndex + 1);
                                int finalLen = afterDecimal.length;
                                String a = '0';
                                String b = '00';
                                String c = '000';
                                if (finalLen == 1) {
                                  value = '$value$c';
                                  print("answerc" + value);
                                } else if (finalLen == 2) {
                                  value = '$value$b';
                                  print("answerb" + value);
                                } else if (finalLen == 3) {
                                  value = '$value$a';
                                  print("answera" + value);
                                } else if (finalLen == 4) {
                                  value = value;
                                  print("answeraaaaa" + value);
                                } else if (finalLen > 4) {
                                  value = num1.toStringAsFixed(4);
                                } else {
                                  value = value.substring(0, pointIndex) +
                                      value.substring(pointIndex, pointIndex + 5);
                                  print("answer " + value);
                                }

                                /* if(AuthToken.baseinr != inr){
                                total = total2.toString();
                              }else {
                                total = total2.toStringAsFixed(0);
                              }*/
                                return Container(
                                  height: 40,
                                  margin: EdgeInsets.only(top: 2),
                                  child: Card(
                                    //color: Color(0xFF18222C),
                                    color: getMyColor(position),
                                    margin: EdgeInsets.symmetric(),
                                    elevation: 0,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(0.0),
                                    ),
                                    //color: getMyColor(index),
                                    //color: Color(0xFF18222C),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment
                                          .spaceBetween,
                                      children: <Widget>[

                                        Container(
                                          padding: EdgeInsets.only(left: 10),
                                          child: RichText(
                                            text: TextSpan(
                                                text: futureAlbum
                                                    .data[position]
                                                    .tradingCurrency,
                                                style:
                                                TextStyle(color: Colors.white,
                                                    fontSize: 14,
                                                    fontWeight: FontWeight.bold),
                                                children: <TextSpan>[
                                                  TextSpan(
                                                    text: "/",
                                                    style: TextStyle(
                                                        color: Colors.grey[500],
                                                        fontSize: 11),
                                                  ),
                                                  TextSpan(
                                                    text: futureAlbum
                                                        .data[position]
                                                        .baseCurrency,
                                                    style: TextStyle(
                                                        color: Colors.grey[500],
                                                        fontSize: 11),
                                                  ),
                                                ]),
                                          ),
                                        ),

                                        Text(
                                          futureAlbum.data[position].price
                                              .toString(),
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                              color:
                                              futureAlbum.data[position].purpose ==
                                                  "buy" ?
                                              Colors.green:
                                              Colors.red,

                                              fontSize: 15,
                                              fontWeight: FontWeight.bold),
                                          softWrap: true,
                                        ),


                                        Text(
                                          value,
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                              color: Colors.white, fontSize: 15,
                                              fontWeight: FontWeight.bold),
                                        ),



                                        Text(
                                          total2.toStringAsFixed(0).toString(),
                                          textAlign: TextAlign.start,
                                          style: TextStyle(
                                              color: Colors.white, fontSize: 15,
                                              fontWeight: FontWeight.bold),
                                          softWrap: true,
                                        ),
                                        Padding(
                                          padding: EdgeInsets.only(right: 8),
                                          child: MaterialButton(
                                            height: 30,
                                            minWidth: 70,
                                            child: Text("Cancel"),
                                            onPressed: () async {
                                              var id = futureAlbum.data[position]
                                                  .sId.toString();
                                              var rsp = await cancleOrder(id);
                                              var data = rsp['data'];
                                              var error = rsp['error'];
                                              if (error == "true") {
                                                print("error");
                                                Fluttertoast.showToast(
                                                    msg: rsp['message'],
                                                    toastLength: Toast.LENGTH_SHORT,
                                                    gravity: ToastGravity.CENTER,
                                                    timeInSecForIosWeb: 1,
                                                    backgroundColor: Colors.red,
                                                    textColor: Colors.white,
                                                    fontSize: 16.0);
                                              } else {
                                                print(data);
                                                Fluttertoast.showToast(
                                                    msg: rsp['message'],
                                                    toastLength: Toast.LENGTH_SHORT,
                                                    gravity: ToastGravity.CENTER,
                                                    timeInSecForIosWeb: 1,
                                                    backgroundColor: Colors.green,
                                                    textColor: Colors.white,
                                                    fontSize: 16.0);
                                                fetchAlbum();
                                                setState(() {

                                                });
                                              }
                                            },
                                            shape: RoundedRectangleBorder(
                                                borderRadius: BorderRadius.circular(30)),
                                            color:
                                            futureAlbum.data[position].purpose ==
                                                "buy"?
                                            Colors.green:
                                            Colors.red,
                                            textColor: Colors.white,
                                            //padding: EdgeInsets.all(0),
                                           // splashColor: Colors.grey,
                                          ),
                                        )
                                      ],
                                    ),
                                  ),
                                );
                              }),
                        ),
                      ),
                    ],
                  ),
                  );
                } else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                return Container(

                    decoration: new BoxDecoration(
                      image: new DecorationImage(
                        image: new AssetImage("assets/bg.png"),
                        fit: BoxFit.cover,),
                    ),
                    alignment: Alignment.center,
                    height: MediaQuery
                        .of(context)
                        .size
                        .height,
                    width: MediaQuery
                        .of(context)
                        .size
                        .width,
                    // margin: EdgeInsets.only(top: 80),
                    child: CircularProgressIndicator(strokeWidth: 6.0,
                        backgroundColor: Colors.green,
                        valueColor: AlwaysStoppedAnimation<Color>(
                            Colors.blue)));
              },
            )),
      ),
    );
  }

}

Color getMyColor(int position) {
  if (position % 2 == 0) {
    return Color(0xFF18222C);
  } else {
    return Color(0xFF233446);
  }
}



